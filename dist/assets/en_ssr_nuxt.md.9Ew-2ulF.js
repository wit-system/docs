import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BdtWl32M.js";const F=JSON.parse('{"title":"Nuxt.js","description":"","frontmatter":{},"headers":[],"relativePath":"en/ssr/nuxt.md","filePath":"en/ssr/nuxt.md"}'),t={name:"en/ssr/nuxt.md"},e=n(`<h1 id="Nuxt-js" tabindex="-1">Nuxt.js <a class="header-anchor" href="#Nuxt-js" aria-label="Permalink to &quot;Nuxt.js&quot;">​</a></h1><p>Using Pinia with <a href="https://nuxt.com/" target="_blank" rel="noreferrer">Nuxt</a> is easier since Nuxt takes care of a lot of things when it comes to <em>server side rendering</em>. For instance, <strong>you don&#39;t need to care about serialization nor XSS attacks</strong>. Pinia supports Nuxt Bridge and Nuxt 3. For bare Nuxt 2 support, <a href="#nuxt-2-without-bridge">see below</a>.</p><h2 id="Installation" tabindex="-1">Installation <a class="header-anchor" href="#Installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">yarn</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> add</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> pinia</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> @pinia/nuxt</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;"># or with npm</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">npm</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> install</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> pinia</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> @pinia/nuxt</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you&#39;re using npm, you might encounter an <em>ERESOLVE unable to resolve dependency tree</em> error. In that case, add the following to your <code>package.json</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&quot;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">overrides</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&quot;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">: </span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">{</span></span>
<span class="line"><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">  &quot;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">vue</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&quot;</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;"> &quot;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">latest</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&quot;</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">}</span></span></code></pre></div></div><p>We supply a <em>module</em> to handle everything for you, you only need to add it to <code>modules</code> in your <code>nuxt.config.js</code> file:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">// nuxt.config.js</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">export</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;"> default</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> defineNuxtConfig</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">({</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">  // ... other options</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">  modules</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> [</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // ...</span></span>
<span class="line"><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">    &#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">@pinia/nuxt</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  ],</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">})</span></span></code></pre></div><p>And that&#39;s it, use your store as usual!</p><h2 id="Awaiting-for-actions-in-pages" tabindex="-1">Awaiting for actions in pages <a class="header-anchor" href="#Awaiting-for-actions-in-pages" aria-label="Permalink to &quot;Awaiting for actions in pages&quot;">​</a></h2><p>As with <code>onServerPrefetch()</code>, you can call a store action within <code>asyncData()</code>. Given how <code>useAsyncData()</code> works, <strong>make sure to return a value</strong>. This will allow Nuxt to skip running the action on the client side and reuse the value from the server.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">script</span><span style="--shiki-dark:#62E884;--shiki-light:#B07D48;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> setup</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">const</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> store</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useStore</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">()</span></span>
<span class="line highlighted"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">// we could also extract the data, but it&#39;s already present in the store</span></span>
<span class="line highlighted"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">await</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useAsyncData</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">user</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> ()</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> store</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">fetchUser</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">())</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&lt;/</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">script</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&gt;</span></span></code></pre></div><p>If your action doesn&#39;t resolve a value, you can add any non nullish value:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">script</span><span style="--shiki-dark:#62E884;--shiki-light:#B07D48;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> setup</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">const</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> store</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useStore</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">()</span></span>
<span class="line highlighted"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">await</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useAsyncData</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">user</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> ()</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> store</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">fetchUser</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">().</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">then</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(()</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#BF9EEE;--shiki-light:#1E754F;"> true</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">))</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&lt;/</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">script</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want to use a store outside of <code>setup()</code>, remember to pass the <code>pinia</code> object to <code>useStore()</code>. We added it to <a href="https://nuxtjs.org/docs/2.x/internals-glossary/context" target="_blank" rel="noreferrer">the context</a> so you have access to it in <code>asyncData()</code> and <code>fetch()</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">import</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> useStore</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> }</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;"> from</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;"> &#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">~/stores/myStore</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">export</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;"> default</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">  asyncData</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">({</span><span style="--shiki-dark:#FFB86C;--shiki-light:#B07D48;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> $pinia</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> })</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">    const</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> store</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useStore</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">$pinia</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  },</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">}</span></span></code></pre></div></div><h2 id="Auto-imports" tabindex="-1">Auto imports <a class="header-anchor" href="#Auto-imports" aria-label="Permalink to &quot;Auto imports&quot;">​</a></h2><p>By default <code>@pinia/nuxt</code> exposes a few auto imports:</p><ul><li><code>usePinia()</code>, which is similar to <code>getActivePinia()</code> but works better with Nuxt. You can add auto imports to make your life easier:</li><li><code>defineStore()</code> to define stores</li><li><code>storeToRefs()</code> when you need to extract individual refs from a store</li><li><code>acceptHMRUpdate()</code> for <a href="./../cookbook/hot-module-replacement.html">hot module replacement</a></li></ul><p>It also automatically imports <strong>all stores</strong> defined within your <code>stores</code> folder. It doesn&#39;t lookup for nested stores though. You can customize this behavior by setting the <code>storesDirs</code> option:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">// nuxt.config.ts</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">export</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;"> default</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> defineNuxtConfig</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">({</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">  // ... other options</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">  modules</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> [</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">@pinia/nuxt</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">],</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">  pinia</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">    storesDirs</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> [</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">./stores/**</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">, </span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">./custom-folder/stores/**</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">],</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  },</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">})</span></span></code></pre></div><p>Note the folders are relative to the root of your project. If you change the <code>srcDir</code> option, you need to adapt the paths accordingly.</p><h2 id="Nuxt-2-without-bridge" tabindex="-1">Nuxt 2 without bridge <a class="header-anchor" href="#Nuxt-2-without-bridge" aria-label="Permalink to &quot;Nuxt 2 without bridge&quot;">​</a></h2><p>Pinia supports Nuxt 2 until <code>@pinia/nuxt</code> v0.2.1. Make sure to also install <a href="https://composition-api.nuxtjs.org/" target="_blank" rel="noreferrer"><code>@nuxtjs/composition-api</code></a> alongside <code>pinia</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">yarn</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> add</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> pinia</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> @pinia/nuxt@0.2.1</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> @nuxtjs/composition-api</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;"># or with npm</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">npm</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> install</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> pinia</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> @pinia/nuxt@0.2.1</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;"> @nuxtjs/composition-api</span></span></code></pre></div><p>We supply a <em>module</em> to handle everything for you, you only need to add it to <code>buildModules</code> in your <code>nuxt.config.js</code> file:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">// nuxt.config.js</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">export</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;"> default</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">  // ... other options</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">  buildModules</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> [</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // Nuxt 2 only:</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // https://composition-api.nuxtjs.org/getting-started/setup#quick-start</span></span>
<span class="line"><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">    &#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">@nuxtjs/composition-api/module</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span></span>
<span class="line"><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">    &#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">@pinia/nuxt</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  ],</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">}</span></span></code></pre></div><h3 id="TypeScript" tabindex="-1">TypeScript <a class="header-anchor" href="#TypeScript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h3><p>If you are using Nuxt 2 (<code>@pinia/nuxt</code> &lt; 0.3.0) with TypeScript or have a <code>jsconfig.json</code>, you should also add the types for <code>context.pinia</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">{</span></span>
<span class="line"><span style="--shiki-dark:#97E2F2;--shiki-light:#B5695999;">  &quot;</span><span style="--shiki-dark:#97E1F1;--shiki-light:#998418;">types</span><span style="--shiki-dark:#97E2F2;--shiki-light:#B5695999;">&quot;</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> [</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // ...</span></span>
<span class="line"><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">    &quot;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">@pinia/nuxt</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&quot;</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  ]</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">}</span></span></code></pre></div><p>This will also ensure you have autocompletion 😉 .</p><h3 id="Using-Pinia-alongside-Vuex" tabindex="-1">Using Pinia alongside Vuex <a class="header-anchor" href="#Using-Pinia-alongside-Vuex" aria-label="Permalink to &quot;Using Pinia alongside Vuex&quot;">​</a></h3><p>It is recommended to <strong>avoid using both Pinia and Vuex</strong> but if you need to use both, you need to tell pinia to not disable it:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">// nuxt.config.js</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">export</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;"> default</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">  buildModules</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> [</span></span>
<span class="line"><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">    &#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">@nuxtjs/composition-api/module</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">    [</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">@pinia/nuxt</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;"> disableVuex</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#BF9EEE;--shiki-light:#1E754F;"> false</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> }],</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  ],</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">  // ... other options</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">}</span></span></code></pre></div>`,32),l=[e];function h(p,k,o,r,d,c){return a(),i("div",null,l)}const y=s(t,[["render",h]]);export{F as __pageData,y as default};
