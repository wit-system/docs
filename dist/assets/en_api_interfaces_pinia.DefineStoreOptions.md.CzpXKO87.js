import{_ as e,c as t,o as a,a4 as i}from"./chunks/framework.BdtWl32M.js";const f=JSON.parse('{"title":"Interface: DefineStoreOptions<Id, S, G, A>","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"en/api/interfaces/pinia.DefineStoreOptions.md","filePath":"en/api/interfaces/pinia.DefineStoreOptions.md"}'),s={name:"en/api/interfaces/pinia.DefineStoreOptions.md"},o=i(`<p><a href="./../">API Documentation</a> / <a href="./../modules/pinia.html">pinia</a> / DefineStoreOptions</p><h1 id="Interface-DefineStoreOptions-Id-S-G-A-" tabindex="-1">Interface: DefineStoreOptions&lt;Id, S, G, A&gt; <a class="header-anchor" href="#Interface-DefineStoreOptions-Id-S-G-A-" aria-label="Permalink to &quot;Interface: DefineStoreOptions\\&lt;Id, S, G, A\\&gt;&quot;">​</a></h1><p><a href="./../modules/pinia.html">pinia</a>.DefineStoreOptions</p><p>Options parameter of <code>defineStore()</code> for option stores. Can be extended to augment stores with the plugin API.</p><p><strong><code>See</code></strong></p><p><a href="./pinia.DefineStoreOptionsBase.html">DefineStoreOptionsBase</a>.</p><h2 id="Type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./../modules/pinia.html#StateTree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;"><code>G</code></td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr></tbody></table><h2 id="Hierarchy" tabindex="-1">Hierarchy <a class="header-anchor" href="#Hierarchy" aria-label="Permalink to &quot;Hierarchy&quot;">​</a></h2><ul><li><p><a href="./pinia.DefineStoreOptionsBase.html"><code>DefineStoreOptionsBase</code></a>&lt;<code>S</code>, <a href="./../modules/pinia.html#Store"><code>Store</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;&gt;</p><p>↳ <strong><code>DefineStoreOptions</code></strong></p></li></ul><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="actions" tabindex="-1">actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;actions&quot;">​</a></h3><p>• <code>Optional</code> <strong>actions</strong>: <code>A</code> &amp; <code>ThisType</code>&lt;<code>A</code> &amp; <code>UnwrapRef</code>&lt;<code>S</code>&gt; &amp; <a href="./pinia._StoreWithState.html"><code>_StoreWithState</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt; &amp; <a href="./../modules/pinia.html#_StoreWithGetters"><code>_StoreWithGetters</code></a>&lt;<code>G</code>&gt; &amp; <a href="./pinia.PiniaCustomProperties.html"><code>PiniaCustomProperties</code></a>&lt;<code>string</code>, <a href="./../modules/pinia.html#StateTree"><code>StateTree</code></a>, <a href="./../modules/pinia.html#_GettersTree"><code>_GettersTree</code></a>&lt;<a href="./../modules/pinia.html#StateTree"><code>StateTree</code></a>&gt;, <a href="./../modules/pinia.html#_ActionsTree"><code>_ActionsTree</code></a>&gt;&gt;</p><p>Optional object of actions.</p><hr><h3 id="getters" tabindex="-1">getters <a class="header-anchor" href="#getters" aria-label="Permalink to &quot;getters&quot;">​</a></h3><p>• <code>Optional</code> <strong>getters</strong>: <code>G</code> &amp; <code>ThisType</code>&lt;<code>UnwrapRef</code>&lt;<code>S</code>&gt; &amp; <a href="./../modules/pinia.html#_StoreWithGetters"><code>_StoreWithGetters</code></a>&lt;<code>G</code>&gt; &amp; <a href="./pinia.PiniaCustomProperties.html"><code>PiniaCustomProperties</code></a>&lt;<code>string</code>, <a href="./../modules/pinia.html#StateTree"><code>StateTree</code></a>, <a href="./../modules/pinia.html#_GettersTree"><code>_GettersTree</code></a>&lt;<a href="./../modules/pinia.html#StateTree"><code>StateTree</code></a>&gt;, <a href="./../modules/pinia.html#_ActionsTree"><code>_ActionsTree</code></a>&gt;&gt; &amp; <a href="./../modules/pinia.html#_GettersTree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</p><p>Optional object of getters.</p><hr><h3 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h3><p>• <strong>id</strong>: <code>Id</code></p><p>Unique string key to identify the store across the application.</p><hr><h3 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;state&quot;">​</a></h3><p>• <code>Optional</code> <strong>state</strong>: () =&gt; <code>S</code></p><p>Function to create a fresh state. <strong>Must be an arrow function</strong> to ensure correct typings!</p><h4 id="Type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#Type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (): <code>S</code></p><h5 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>S</code></p><h2 id="Methods" tabindex="-1">Methods <a class="header-anchor" href="#Methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="hydrate" tabindex="-1">hydrate <a class="header-anchor" href="#hydrate" aria-label="Permalink to &quot;hydrate&quot;">​</a></h3><p>▸ <strong>hydrate</strong>(<code>storeState</code>, <code>initialState</code>): <code>void</code></p><p>Allows hydrating the store during SSR when complex state (like client side only refs) are used in the store definition and copying the value from <code>pinia.state</code> isn&#39;t enough.</p><h4 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>storeState</code></td><td style="text-align:left;"><code>UnwrapRef</code>&lt;<code>S</code>&gt;</td><td style="text-align:left;">the current state in the store</td></tr><tr><td style="text-align:left;"><code>initialState</code></td><td style="text-align:left;"><code>UnwrapRef</code>&lt;<code>S</code>&gt;</td><td style="text-align:left;">initialState</td></tr></tbody></table><h4 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><p><strong><code>Example</code></strong></p><p>If in your <code>state</code>, you use any <code>customRef</code>s, any <code>computed</code>s, or any <code>ref</code>s that have a different value on Server and Client, you need to manually hydrate them. e.g., a custom ref that is stored in the local storage:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code"><code><span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">const</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> useStore</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> defineStore</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">main</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">  state</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> () </span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">=&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> ({</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">    n</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useLocalStorage</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">key</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">, </span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;">0</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  }),</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">  hydrate</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#FFB86C;--shiki-light:#B07D48;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">storeState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">, </span><span style="--shiki-dark:#FFB86C;--shiki-light:#B07D48;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">initialState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">) {</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // @ts-expect-error: https://github.com/microsoft/TypeScript/issues/43826</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">    storeState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">n</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useLocalStorage</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">key</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695999;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">, </span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;">0</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">})</span></span></code></pre></div>`,41),n=[o];function r(d,l,h,p,c,k){return a(),t("div",null,n)}const y=e(s,[["render",r]]);export{f as __pageData,y as default};
